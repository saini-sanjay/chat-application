{"version":3,"sources":["Components/MessageList.js","Components/sendMessageForm.js","Components/RoomList.js","Components/NewRoomForm.js","App.js","serviceWorker.js","index.js"],"names":["MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","props","roomId","react_default","a","createElement","className","messages","map","message","index","key","senderId","text","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","target","value","handleSubmit","preventDefault","sendMessage","state","onSubmit","disabled","onChange","placeholder","type","RoomList","rooms","room","active","id","href","onClick","subscribeToRoom","name","NewRoomForm","roomName","bind","assertThisInitialized","createRoom","required","App","getRooms","currentUser","getJoinableRooms","then","joinableRooms","joinedRooms","catch","err","console","log","hooks","onMessage","concat","toConsumableArray","_this2","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","Components_RoomList","Components_MessageList","sendMessageForm","Components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6db58f83.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './messagelist.css';\r\n class MessageList extends React.Component {\r\n \t  componentWillUpdate() {\r\n        const node = ReactDOM.findDOMNode(this)\r\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n        if (this.shouldScrollToBottom) {\r\n            const node = ReactDOM.findDOMNode(this)\r\n            node.scrollTop = node.scrollHeight   \r\n        }\r\n    }\r\n\trender() {\r\n\t\t if (!this.props.roomId) {\r\n            return (\r\n                <div className=\"message-list\">\r\n                    <div className=\"join-room\">\r\n                        &larr; Join a room!\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\t\treturn (\r\n\t\t\t<div className=\"message-list\">\r\n\t\t\t{\r\n\t\t\tthis.props.messages.map((message,index)=>(\r\n\t\t\t <div key={index} className=\"message\">\r\n                            <div className=\"message-username\">{message.senderId}</div>\r\n                            <div className=\"message-text\">{message.text}</div>\r\n                        </div>\r\n\t\t\t))\r\n\t\t\t}\t\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default MessageList;\r\n","import React, { Component } from 'react';\r\nimport './messageform.css';\r\nclass SendMessageForm extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\tmessage:\"\"\r\n\t\t}\r\n\r\n\t}\r\n\thandleChange=(e)=>{\r\n\t\tthis.setState({\r\n\t\t message:e.target.value \r\n\t\t});\r\n\t}\r\n\thandleSubmit=(e)=>{\r\n\t\te.preventDefault();\r\n\t\t this.props.sendMessage(this.state.message);\r\n\t\t this.setState({message:''});\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"send-message-form\">\r\n\t\t\t<form onSubmit={this.handleSubmit} className=\"send-message-form\">\r\n                <input \r\n                    disabled={this.props.disabled}\r\n                    onChange={this.handleChange}\r\n                    value={this.state.message}\r\n                    placeholder=\"Type your message and hit ENTER\"\r\n                    type=\"text\" />\r\n            </form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default SendMessageForm;\r\n","import React, { Component } from 'react';\r\nimport './roomlist.css';\r\n class RoomList extends  React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t <div className=\"rooms-list\">\r\n                <ul>\r\n                <h3>Your rooms:</h3>\r\n                    {this.props.rooms.map(room => {\r\n                    \t const active = this.props.roomId === room.id ? \"active\" : \"\";\r\n                        return (\r\n                            <li  key={room.id} className={\"room\"+ active}>\r\n                                <a href=\"#\" onClick={() => this.props.subscribeToRoom(room.id)}># {room.name}</a>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default RoomList;\r\n","import React from 'react';\r\nimport './newroom.css';\r\nclass NewRoomForm extends React.Component {\r\n    \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            roomName: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n    \r\n    handleChange(e) {\r\n        this.setState({\r\n            roomName: e.target.value\r\n        })\r\n    }\r\n    \r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.createRoom(this.state.roomName);\r\n        this.setState({roomName:''});\r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <div className=\"new-room-form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        value={this.state.roomName}\r\n                        onChange={this.handleChange}\r\n                        type=\"text\" \r\n                        placeholder=\"Create a room\" \r\n                        required />\r\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewRoomForm;","import React, { Component } from 'react';\nimport MessageList from './Components/MessageList';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport SendMessageForm from './Components/sendMessageForm';\nimport RoomList from './Components/RoomList';\nimport NewRoomForm from './Components/NewRoomForm';\nimport './style.css';\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      roomId:null,\n      messages:[],\n      joinableRooms: [],\n      joinedRooms: []\n    }\n  }\n  componentDidMount(){\n    const chatManager = new ChatManager({\n    instanceLocator: 'v1:us1:5b2cd92f-1db7-4bb2-b1ff-0b8258f99447',\n    userId: 'saini',\n    tokenProvider: new TokenProvider({ url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/5b2cd92f-1db7-4bb2-b1ff-0b8258f99447/token' })\n                                        })\n  chatManager.connect()\n  .then(currentUser => {\n    this.currentUser=currentUser;\n    //console.log(this.currentUser.rooms)  working\n    this.getRooms();\n  })\n  .catch(err => {\n    console.log('Error on connection', err)\n  })\n\n  }\n  getRooms=()=>{ this.currentUser.getJoinableRooms()\n            .then(joinableRooms => {\n                this.setState({\n                    joinableRooms,\n                    joinedRooms: this.currentUser.rooms\n                })\n               // console.log([...this.state.joinableRooms,...this.state.joinedRooms]);\n            })\n            .catch(err => console.log('error on joinableRooms: ', err))\n          }\n  subscribeToRoom=(roomId)=> {\n        this.setState({ messages: [] })\n        this.currentUser.subscribeToRoom({\n            roomId: roomId,\n            hooks: {\n                onMessage: message => {\n                    this.setState({\n                        messages: [...this.state.messages, message]\n                    })\n                }\n            }    \n        })\n        .then(room => {\n            this.setState({\n                roomId: room.id\n            });\n            this.getRooms()\n          })\n        .catch(err => console.log('error on subscribing to room: ', err))\n    }\n  sendMessage=(text)=> {\n        this.currentUser.sendMessage({\n            text,\n            roomId:this.state.roomId\n        })\n    }\n    createRoom=(name)=> {\n      this.currentUser.createRoom({\n            name\n        })\n        .then(room => this.subscribeToRoom(room.id))\n        .catch(err => console.log('error with createRoom: ', err))\n    }\n  render() {\n    return (\n      <div className=\"App\">\n        <RoomList \n        roomId={this.state.roomId}\n        subscribeToRoom={this.subscribeToRoom}\n        rooms={[...this.state.joinableRooms,...this.state.joinedRooms]}/>\n        <MessageList roomId={this.state.roomId} messages={this.state.messages} />\n        <SendMessageForm disabled={ !this.state.roomId } sendMessage={this.sendMessage} />\n         <NewRoomForm createRoom={this.createRoom} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}